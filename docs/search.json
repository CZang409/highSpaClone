[{"path":"/articles/Intro_to_highSpaClone.html","id":"loading-required-input-data","dir":"Articles","previous_headings":"","what":"Loading required input data","title":"Intro: VisumHD Breast Cancer Dataset","text":"highSpaClone requires three types input data: Spatial transcriptomics count data (row: gene, column: cell). Spatial location information: spatial coordinates cell, three columns (cell.id, x, y). row names location must match column names counts.). Cell annotation information: cell type annotation information, contain two columns, (cell.id, cell.label). Can data.frame, .csv .txt file.","code":"data <- readRDS('C:/Users/CZang/OneDrive - Inside MD Anderson/chenxuan/project/highSpaClone/data/test.rds')  counts <- data$counts location <- data$spatial_location annotation <- data$annotation"},{"path":"/articles/Intro_to_highSpaClone.html","id":"create-highspaclone-object","dir":"Articles","previous_headings":"","what":"Create highSpaClone object","title":"Intro: VisumHD Breast Cancer Dataset","text":"step create highSpaClone object. important input arguments : counts: Gene--cell raw count matrix. Ensure contain row/column names. location: data.frame matrix spatial coordinates cell three columns representing cell id, x y coordinates spatial location (column names must contain “cell.id”, “x” “y”). annotations_file: Cell type annotation file two columns representing cell id cell type/cluster cell. Must data.frame, .csv .txt file. gene_order_file: gene order file, contains chromosome, start, stop position gene. provided, function uses built-hg38 annotation. Users may upload/provide custom file replace default. min_avg_expression: Minimum average expression per gene (default: 0.01). min_gene_counts: Minimum total counts per cell (default: 100). project: Project name.","code":"obj <- createObject(counts=counts,                     location=location,                     annotations_file = annotation,                     gene_order_file=NULL,                     min_avg_expression=0.01,                     min_gene_counts=100,                     project='visumhd.breast') #> Filtered genes based on average expression threshold: 5992 genes removed. #> Remaining genes after filtering: 12093 genes. #> Filtered cells based on minimum gene counts threshold: 1 cells removed. #> Remaining cells after filtering: 999 cells. #> Removed 0 genes that did not match the gene order file. #> Remaining 11721 genes after matching with the gene order file."},{"path":[]},{"path":"/articles/Intro_to_highSpaClone.html","id":"smooth-by-chromosome","dir":"Articles","previous_headings":"Main function","what":"Smooth by chromosome","title":"Intro: VisumHD Breast Cancer Dataset","text":"step smooth gene expression gene order within chromosome, improves CNV signal continuity suppresses gene-specific noise. important input arguments : obj: highSpaClone object. window_size: Size running-mean window (genes) used within chromosome (default: 101). Must integer. step: Number genes bin (default: 50). Must integer. use_chunk: Whether split cells smaller subsets (chunks) computation (default: TRUE). chunk_size: number cells per chunk chunking enabled (default: 5000). parallel: TRUE, chunks processed parallel accelerate runtime (default: FALSE).","code":"# smooth gene expression by chromosome smooth_obj <- smooth_expr(obj = obj,                            window_size = 101,                           step = 50,                           use_chunk = T,                            chunk_size = 100,                           parallel = T  ) #> Normalization time:  0.02456999  seconds #> Working with sparse matrix format (keeping sparse) #> Total cells:  999  #>  #> === Chunking mode enabled === #> Processing in chunks of size  100 ... #> Total chunks:  10  #> === Parallel processing enabled === #> Requested cores:  4  (max_cores limit:  4 ) #> Estimated memory usage: ~ 0.12  GB #> Windows system detected: using parLapply #> Using  4  cores #> Parallel processing completed. #> Combining results... #> Combining dense matrices... #> Result class:  matrix  #> Result dimensions:  999  x  192  #> Calculating chromosome positions... #>  #> Storing results in object... #> Results successfully stored. #>  #> ======================================== #> Total running time:  0.12  minutes #> ========================================"},{"path":"/articles/Intro_to_highSpaClone.html","id":"identify-tumor-cells-optional","dir":"Articles","previous_headings":"Main function","what":"Identify tumor cells (optional)","title":"Intro: VisumHD Breast Cancer Dataset","text":"FindTumor() function identifies tumor cells based CNV profiles prior tumor annotations available. function performs reference-guided tumor segmentation using smoothed highSpaClone object. requires users specify normal (reference) cell population, can provided either following forms: ref: character vector reference cell type labels. ref.id: character vector reference cell IDs. one arguments needs provided.","code":"# Tumor segmentation obj <- FindTumor(smooth_obj,                  ref=c(\"B Cells\", \"CD4+ T Cells\", \"CD8+ T Cells\",                   \"Macrophages 1\", \"Macrophages 2\", \"Endothelial\")) #> ======================================== #> Start Tumor Annotation... #> ======================================== #> CNV matrix dimensions:  192  x  999  #> Reference cell types:  B Cells, CD4+ T Cells, CD8+ T Cells, Macrophages 1, Macrophages 2, Endothelial  #> Number of reference cells:  71  #> Iteration  1  /  500  #>  #> Converged at iteration  30  #>  #> Iteration time:  0.11  minutes #>  #> ======================================== #> Tumor annotation completed! #> Total time:  0.11  minutes #> ========================================  # Visualization colors <- c(\"#ebe5c2\", \"#D57358\") spatialplot(obj, colors=colors, point_size = 3, use_coord_flip=T)"},{"path":"/articles/Intro_to_highSpaClone.html","id":"suggest-the-number-of-subclones-optional","dir":"Articles","previous_headings":"Main function","what":"Suggest the number of subclones (optional)","title":"Intro: VisumHD Breast Cancer Dataset","text":"number tumor subclones must pre-specified. prior knowledge, provide function suggest_k, recommends appropriate value K based Silhouette score integrates CNV spatial information. important input arguments : obj: smoothed highSpaClone object. ref: character vector reference cell type labels. tumor: character vector tumor cell type labels. k_range: Integer vector K values evaluate. n_sub: Max number cells subsample evaluation (default: 5000). alpha: number bewtween 0 1. Control weight CNV clustering.","code":"# Suggest the number of subclones suggest_k(     obj=smooth_obj,     ref=c(\"B Cells\", \"CD4+ T Cells\", \"CD8+ T Cells\",            \"Macrophages 1\", \"Macrophages 2\", \"Endothelial\"),     tumor=\"Invasive Tumor\",     k_range = 2:8,     n_sub = 500,     alpha = 0.7,     seed = 123,     out_dir = \"figs_k\" ) #> Suggested K by average silhouette = 3 (mean=0.215)"},{"path":"/articles/Intro_to_highSpaClone.html","id":"spatial-cnv-inference-and-subclone-detection","dir":"Articles","previous_headings":"Main function","what":"Spatial CNV inference and subclone detection","title":"Intro: VisumHD Breast Cancer Dataset","text":"FindClone() function performs spatial CNV inference tumor subclone identification based CNV patterns, enhanced spatial regularization. tumor cells identified, function clusters subclonal populations share similar CNV states also preserving spatial continuity. Users must define reference (normal) cell population using either: ref: character vector reference (normal) cell type labels, ref.id: character vector reference cell IDs. non-reference cells treated tumor cells default. Alternatively, users may explicitly specify tumor population via: tumor: character vector tumor cell type labels, tumor.id: character vector tumor cell IDs. parameter lambda controls strength spatial smoothing, encouraging neighboring cells remain subclone supported CNV evidence. number subclones infer set K, allowing flexible modeling tumor heterogeneity.","code":"# Spatial CNV inference and tumor subclone detection obj <- FindClone(obj=smooth_obj,                  ref=c(\"B Cells\", \"CD4+ T Cells\", \"CD8+ T Cells\",                        \"Macrophages 1\", \"Macrophages 2\", \"Endothelial\"),                  tumor=\"Invasive Tumor\",                  K=3,                  lambda=1) #> ======================================== #> Running highSpaClone... #> ======================================== #>  #> [Step 1] Preparing data... #> CNV matrix dimensions (genes x cells):  192  x  999  #> Reference cell types (ref):  B Cells, CD4+ T Cells, CD8+ T Cells, Macrophages 1, Macrophages 2, Endothelial  #> Reference cell number:  71  #> Tumor cell number:  540  #>  #> [Step 2] Initializing matrices... #>  #> [Step 3] Starting iterative optimization... #> Iteration  1  /  500  #> Iteration  25  /  500  #> Iteration  50  /  500  #>  #> Converged at iteration  66  #>  #> Iteration time:  0.23  minutes #>  #> [Step 4] Storing results... #> Results stored in object. #>  #> ======================================== #> CNV inference and tumor subclone detection completed! #> Total time:  0.23  minutes #> ========================================  # Visualization colors <- c(\"#E64B35\", \"#4DBBD5\", \"#8491B4\") spatialplot(obj, colors=colors, point_size = 3, use_coord_flip=T)"},{"path":"/articles/Intro_to_highSpaClone.html","id":"visualize-cnv-heatmap","dir":"Articles","previous_headings":"Main function","what":"Visualize CNV heatmap","title":"Intro: VisumHD Breast Cancer Dataset","text":"Visualize subclonal CNV patterns heatmap:","code":"# Visualize CNV heatmap log.cnv <- log2(obj@cnv.data) log.cnv[log.cnv > -0.5 & log.cnv < 0.5] <- 0  breasthd <- list(   cnv.data   = log.cnv,   annotation = obj@cluster,   chr_pos    = obj@chr_pos )  cnv_heatmap(   cnv.obj=breasthd,   groupby = \"cell.label\",   min_value  = -3,     max_value  = 3,   show    = TRUE,          save    = TRUE,            outfile = \"breasthd_heatmap.png\"  )"},{"path":"/articles/visiumhd_colon_code.html","id":"p1","dir":"Articles","previous_headings":"","what":"P1","title":"VisiumHD Colorectal Cancer Datasets","text":"","code":"# apply highSpaClone to infer spatial CNV and detect tumor subclones library(highSpaClone) library(ggplot2) library(dplyr)  # load data data <- readRDS('./visiumhd_colon_p1_data.rds')  # create highSpaClone object obj <- createObject(counts=data$counts,                     location=data$location,                     annotations_file = data$annotation,                     min_avg_expression=0,                     min_gene_counts=0)  # smooth gene expression by chromosome smooth_obj <- smooth_expr(obj = obj, parallel = T, use_chunk = T)  # tumor identification tumor_obj <- FindClone(smooth_obj,                       ref=c(\"B cells\",\"T cells\", \"Smooth Muscle\", \"Endothelial\"),                       K=2,                       lambda=0.001)  # tumor spatial visualization colors <- c(\"#ebe5c2\", \"#D57358\") spatialplot(tumor_obj, colors=colors, point_size = 0.01, use_coord_flip=T, use_x_reverse=T)  tumor.df <- tumor_obj@cluster tumor.id <- tumor.df %>% filter(cell.label=='Tumor') %>% select(cell.id) subclone_obj <- FindClone(smooth_obj,                           ref=c(\"B cells\",\"T cells\", \"Smooth Muscle\", \"Endothelial\"),                           tumor.id=tumor.id$cell.id,                           K=2,                           lambda=1)  colors <- c(\"#D57358\",\"#8a508f\") spatialplot(subclone_obj,  colors=colors, point_size = 0.01, use_coord_flip=T, use_x_reverse=T)  # CNV heatmap log.cnv <- log2(cnv_obj@cnv.data) log.cnv[log.cnv > -0.5 & log.cnv < 0.5] <- 0  visiumhd_colon_p1 <- list(   cnv.data   = log.cnv,   annotation = cnv_obj@cluster,   chr_pos    = cnv_obj@chr_pos )  cnv_heatmap(   cnv.obj=visiumhd_colon_p1,   groupby = \"cell.label\",   min_value  = -3,     max_value  = 3,   auto_size = F,   show    = TRUE,          save    = TRUE,            outfile = \"visiumhd_colon_p1_heatmap.pdf\"  )"},{"path":"/articles/visiumhd_colon_code.html","id":"p2","dir":"Articles","previous_headings":"","what":"P2","title":"VisiumHD Colorectal Cancer Datasets","text":"","code":"# load data data <- readRDS('./visiumhd_colon_p2_data.rds')  # create highSpaClone object obj <- createObject(counts=data$counts,                     location=data$location,                     annotations_file = data$annotation,                     min_avg_expression=0,                     min_gene_counts=0)  # smooth gene expression by chromosome smooth_obj <- smooth_expr(obj = obj, parallel = T, use_chunk = T)  # tumor identification tumor_obj <- FindClone(smooth_obj,                       ref=c(\"B cells\",\"T cells\", \"Smooth Muscle\", \"Endothelial\"),                       K=2,                       lambda=0.001)  # tumor spatial visualization colors <- c(\"#ebe5c2\", \"#D57358\") spatialplot(tumor_obj, colors=colors, point_size = 0.01, use_coord_flip=T, use_x_reverse=T)  tumor.df <- tumor_obj@cluster tumor.id <- tumor.df %>% filter(cell.label=='Tumor') %>% select(cell.id) subclone_obj <- FindClone(smooth_obj,                           ref=c(\"B cells\",\"T cells\", \"Smooth Muscle\", \"Endothelial\"),                           tumor.id=tumor.id$cell.id,                           K=2,                           lambda=1)  colors <- c(\"#D57358\",\"#8a508f\") spatialplot(subclone_obj,  colors=colors, point_size = 0.01, use_coord_flip=T, use_x_reverse=T)  # CNV heatmap log.cnv <- log2(cnv_obj@cnv.data) log.cnv[log.cnv > -0.5 & log.cnv < 0.5] <- 0  visiumhd_colon_p2 <- list(   cnv.data   = log.cnv,   annotation = cnv_obj@cluster,   chr_pos    = cnv_obj@chr_pos )  cnv_heatmap(   cnv.obj=visiumhd_colon_p2,   groupby = \"cell.label\",   min_value  = -3,     max_value  = 3,   auto_size = F,   show    = TRUE,          save    = TRUE,            outfile = \"visiumhd_colon_p2_heatmap.pdf\"  )"},{"path":"/articles/visiumhd_colon_code.html","id":"p5","dir":"Articles","previous_headings":"","what":"P5","title":"VisiumHD Colorectal Cancer Datasets","text":"","code":"# load data data <- readRDS('./visiumhd_colon_p5_data.rds')  # create highSpaClone object obj <- createObject(counts=data$counts,                     location=data$location,                     annotations_file = data$annotation,                     min_avg_expression=0,                     min_gene_counts=0)  # smooth gene expression by chromosome smooth_obj <- smooth_expr(obj = obj, parallel = T, use_chunk = T)  # tumor identification tumor_obj <- FindClone(smooth_obj,                       ref=c(\"B cells\",\"T cells\", \"Smooth Muscle\", \"Endothelial\"),                       K=2,                       lambda=0.001)  # tumor spatial visualization colors <- c(\"#ebe5c2\", \"#D57358\") spatialplot(tumor_obj, colors=colors, point_size = 0.01, use_coord_flip=T, use_x_reverse=T)  tumor.df <- tumor_obj@cluster tumor.id <- tumor.df %>% filter(cell.label=='Tumor') %>% select(cell.id) subclone_obj <- FindClone(smooth_obj,                           ref=c(\"B cells\",\"T cells\", \"Smooth Muscle\", \"Endothelial\"),                           tumor.id=tumor.id$cell.id,                           K=2,                           lambda=1)  colors <- c(\"#D57358\",\"#8a508f\") spatialplot(subclone_obj,  colors=colors, point_size = 0.01, use_coord_flip=T, use_x_reverse=T)  # CNV heatmap log.cnv <- log2(cnv_obj@cnv.data) log.cnv[log.cnv > -0.5 & log.cnv < 0.5] <- 0  visiumhd_colon_p1 <- list(   cnv.data   = log.cnv,   annotation = cnv_obj@cluster,   chr_pos    = cnv_obj@chr_pos )  cnv_heatmap(   cnv.obj=visiumhd_colon_p1,   groupby = \"cell.label\",   min_value  = -3,     max_value  = 3,   auto_size = F,   show    = TRUE,          save    = TRUE,            outfile = \"visiumhd_colon_p1_heatmap.pdf\"  )"},{"path":"/articles/xenium_breast1_code.html","id":"python-code","dir":"Articles","previous_headings":"","what":"Python code","title":"Xenium Breast Cancer Dataset 1","text":"","code":"# apply Tangram to impute genes import os, sys import numpy as np import pandas as pd import matplotlib.pyplot as plt import seaborn as sns import scanpy as sc import torch import tangram as tg  tg.__version__  # spatial transcriptomics data ad_sp = sc.read_10x_h5(     filename=\"cell_feature_matrix.h5\" )  df = pd.read_csv(     \"cells.csv\" )  df.set_index(ad_sp.obs_names, inplace=True) ad_sp.obs = df.copy()  ad_sp.obsm[\"spatial\"] = ad_sp.obs[[\"x_centroid\", \"y_centroid\"]].copy().to_numpy() print(ad_sp)  # single cell rna sequencing reference ad_sc = sc.read_h5ad('./xenium_breast1_sc.h5ad') sc.pp.normalize_total(ad_sc)  gene_names = ad_sp.var_names markers = gene_names.tolist() print(len(markers))  tg.pp_adatas(ad_sc, ad_sp, genes=markers) assert ad_sc.uns['training_genes'] == ad_sp.uns['training_genes']  ad_map = tg.map_cells_to_space(     adata_sc=ad_sc,     adata_sp=ad_sp,     device='cpu')  tg.project_cell_annotations(ad_map, ad_sp, annotation='cell_label') annotation_list = list(pd.unique(ad_sc.obs['cell_label']))  ad_map.uns['train_genes_df'] ad_ge = tg.project_genes(adata_map=ad_map, adata_sc=ad_sc) print(ad_ge) coords = [[x,y] for x,y in zip(ad_sp.obs['x_centroid'].values*(-1),ad_sp.obs['y_centroid'].values*(-1))] ad_sp.obsm['spatial'] = np.array(coords) ad_ge.write('xenium_breast1_tangram.h5ad')  # training score tg.plot_training_scores(ad_map, bins=20, alpha=.5) plt.savefig(\"train_score.png\",dpi=300)  # cell type mapping tg.plot_cell_annotation_sc(ad_sp, annotation_list,spot_size= 50, scale_factor=0.1, perc=0.001) plt.savefig(\"cell_annotation.png\",dpi=300)  #################################################################### ## scale gene expression to scRNA range ad_ge.var_names=[i.upper() for i in list(ad_ge.var_names)] ad_sc = ad.read_h5ad('./xenium_breast1_sc.h5ad') ad_sc.var_names=[i.upper() for i in list(ad_sc.var_names)] ad_sc.var_names.is_unique duplicates = ad_sc.var_names[ad_sc.var_names.duplicated()] print(\"Duplicate var_names:\", duplicates) ad_sc = ad_sc[:, ~ad_sc.var_names.duplicated()].copy()  genes_adata1 = ad_ge.var_names genes_adata2 = ad_sc.var_names  common_genes = genes_adata1.intersection(genes_adata2) ad_sp_filtered = ad_ge[:, common_genes].copy() ad_sc_filtered = ad_sc[:,common_genes].copy()  X1 = ad_sp_filtered.X X2 = ad_sc_filtered.X  import scipy.sparse if scipy.sparse.issparse(X1):     X1 = X1.toarray()  if scipy.sparse.issparse(X2):     X2 = X2.toarray()  min_vals_1 = np.min(X1, axis=0) max_vals_1 = np.max(X1, axis=0) min_vals_2 = np.min(X2, axis=0) max_vals_2 = np.max(X2, axis=0)  scaled_X = (X1 - min_vals_1) / (max_vals_1 - min_vals_1) scaled_X = scaled_X * (max_vals_2 - min_vals_2) + min_vals_2  ad_sp_filtered.X = scaled_X ad_sp_filtered.write_h5ad('xenium_breast1_sc_scale.h5ad')"},{"path":"/articles/xenium_breast1_code.html","id":"r-code","dir":"Articles","previous_headings":"","what":"R code","title":"Xenium Breast Cancer Dataset 1","text":"","code":"# apply highSpaClone to infer spatial CNV and detect tumor subclones library(highSpaClone) library(anndata) library(ggplot2) library(dplyr)  # load data data=read_h5ad(\"./xenium_breast1_sc_scale.h5ad\") counts=t(data$X) colnames(counts)=data$obs$cell_id  location=data.frame(id=factor(data$obs$cell_id),                     x=data$obs$x_centroid,                     y=data$obs$y_centroid) rm(data) gc() rownames(location)=location$id location <- location[match(colnames(counts),rownames(location)),]  annotation <- read.csv('./xenium_breast1_label.csv') annotaton <- annotation[match(colnames(counts),annotation$cell.id),] xenium_breast1_obj <- list(counts=counts, location=location, annotation=annotation) saveRDS(xenium_breast1_obj, file='xenium_breast1_obj.rds')  data <- readRDS('xenium_breast1_obj.rds')  # create highSpaClone object obj <- createObject(counts=data$counts,                     location=data$location,                     annotations_file = data$annotation)  # smooth gene expression by chromosome smooth_obj <- smooth_expr(obj = obj, parallel = T, use_chunk = T)  # CNV inference and subclone detection cnv_obj <- FindClone(smooth_obj,                       ref=c(\"Macrophages_1\", \"Macrophages_2\", \"B_Cells\", \"CD8+_T_Cells\", \"CD4+_T_Cells\"),                       tumor=c(\"Invasive_Tumor\", \"Prolif_Invasive_Tumor\", \"DCIS_1\", \"DCIS_2\"),                       K=3,                       lambda=1000)  # subclone spatial visualization colors <- c(\"#D57358\", \"#8a508f\", \"#023047\") spatialplot(cnv_obj, use_x_reverse=T, colors=colors, point_size = 0.01)  # CNV heatmap log.cnv <- log2(cnv_obj@cnv.data) log.cnv[log.cnv > -0.3 & log.cnv < 0.3] <- 0  xenium_breast1 <- list(   cnv.data   = log.cnv,   annotation = cnv_obj@cluster,   chr_pos    = cnv_obj@chr_pos )  cnv_heatmap(   cnv.obj=xenium_breast1,   groupby = \"cell.label\",   auto_size = F,   width_in = 7,   height_in = 5,   show    = TRUE,          save    = TRUE,            outfile = \"xenium_breast1_heatmap.pdf\"  )"},{"path":"/articles/xenium_breast2_code.html","id":"python-code","dir":"Articles","previous_headings":"","what":"Python code","title":"Xenium Breast Cancer Dataset 2","text":"","code":"# apply Tangram to impute genes import os, sys import anndata as ad import numpy as np import pandas as pd import matplotlib.pyplot as plt import seaborn as sns import scanpy as sc import torch import tangram as tg  tg.__version__  ############################################################################# # spatial transcriptomics data ad_sp = ad.read_h5ad('./xenium_breast2_sp.h5ad') ad_sp.obsm[\"spatial\"] = ad_sp.obs[[\"x_centroid\", \"y_centroid\"]].copy().to_numpy()  # single cell rna sequencing reference ad_sc = ad.read_h5ad('./xenium_breast2_sc.h5ad') sc.pp.normalize_total(ad_sc)  gene_names = ad_sp.var_names markers = gene_names.tolist() print(len(markers))  tg.pp_adatas(ad_sc, ad_sp, genes=markers) assert ad_sc.uns['training_genes'] == ad_sp.uns['training_genes']  ad_map = tg.map_cells_to_space(     adata_sc=ad_sc,     adata_sp=ad_sp,     device='cpu')  tg.project_cell_annotations(ad_map, ad_sp, annotation='celltype') annotation_list = list(pd.unique(ad_sc.obs['celltype']))  ad_map.uns['train_genes_df'] ad_ge = tg.project_genes(adata_map=ad_map, adata_sc=ad_sc) print(ad_ge) ad_ge.write('xenium_breast2_tangram.h5ad')  # training score tg.plot_training_scores(ad_map, bins=20, alpha=.5) plt.savefig(\"xenium_breast2_train_score.png\",dpi=300)  # cell type mapping tg.plot_cell_annotation_sc(ad_sp, annotation_list,spot_size= 50, scale_factor=0.1, perc=0.001) plt.savefig(\"xenium_breast2_tangram_cell_annotation.png\",dpi=300)  #################################################################### ## scale gene expression to scRNA range ad_ge.var_names=[i.upper() for i in list(ad_ge.var_names)] ad_sc = ad.read_h5ad('./xenium_breast2_sc.h5ad') ad_sc.var_names=[i.upper() for i in list(ad_sc.var_names)] ad_sc.var_names.is_unique duplicates = ad_sc.var_names[ad_sc.var_names.duplicated()] print(\"Duplicate var_names:\", duplicates) ad_sc = ad_sc[:, ~ad_sc.var_names.duplicated()].copy()  genes_adata1 = ad_ge.var_names genes_adata2 = ad_sc.var_names  common_genes = genes_adata1.intersection(genes_adata2) ad_sp_filtered = ad_ge[:, common_genes].copy() ad_sc_filtered = ad_sc[:,common_genes].copy()  X1 = ad_sp_filtered.X X2 = ad_sc_filtered.X  import scipy.sparse if scipy.sparse.issparse(X1):     X1 = X1.toarray()  if scipy.sparse.issparse(X2):     X2 = X2.toarray()  min_vals_1 = np.min(X1, axis=0) max_vals_1 = np.max(X1, axis=0) min_vals_2 = np.min(X2, axis=0) max_vals_2 = np.max(X2, axis=0)  scaled_X = (X1 - min_vals_1) / (max_vals_1 - min_vals_1) scaled_X = scaled_X * (max_vals_2 - min_vals_2) + min_vals_2  ad_sp_filtered.X = scaled_X ad_sp_filtered.write_h5ad('xenium_breast2_sc_scale.h5ad')"},{"path":"/articles/xenium_breast2_code.html","id":"r-code","dir":"Articles","previous_headings":"","what":"R code","title":"Xenium Breast Cancer Dataset 2","text":"","code":"# apply highSpaClone to infer spatial CNV and detect tumor subclones library(highSpaClone) library(anndata) library(ggplot2) library(dplyr)  data=read_h5ad(\"./xenium_breast2_sc_scale.h5ad\") counts=Matrix::t(data$X) colnames(counts)=data$obs$cell_id  location=data.frame(id=factor(data$obs$cell_id),                     x=data$obs$x_centroid,                     y=data$obs$y_centroid) rm(data) gc() rownames(location)=location$id location <- location[match(colnames(counts),rownames(location)),] annotation <- read.csv('./xenium_breast2_label.csv') xenium_breast2_obj <- list(counts=data$counts, location=data$location, annotation=annotation) saveRDS(xenium_breast2_obj, file='./xenium_breast2_obj.rds')  # load data data <- readRDS('./xenium_breast2_obj.rds')  # create highSpaClone object obj <- createObject(counts=data$counts,                          location=data$location,                          annotations_file = data$annotation)  # smooth gene expression by chromosome smooth_obj <- smooth_expr(obj = obj, parallel = T, use_chunk = T)  # CNV inference and subclone detection cnv_obj <- FindClone(smooth_obj,                       ref=c(\"Bcell\", \"Tcell\", \"Mast\", \"Myeloid\"),                       tumor=c('DCIS_Basal','DCIS_LumHR','DCIS_LumSec','IDC_LumHR'),                       K=2,                       lambda=1000)  # subclone spatial visualization colors <- c(\"#D57358\", \"#8a508f\") spatialplot(cnv_obj, colors=colors, point_size = 0.05)  # CNV heatmap log.cnv <- log2(cnv_obj@cnv.data) log.cnv[log.cnv > -0.3 & log.cnv < 0.3] <- 0  xenium_breast2 <- list(   cnv.data   = log.cnv,   annotation = cnv_obj@cluster,   chr_pos    = cnv_obj@chr_pos )  cnv_heatmap(   cnv.obj=xenium_breast2,   groupby = \"cell.label\",   min_value  = -2.5,     max_value  = 2.5,   auto_size = F,   width_in = 7,   height_in = 5,   show    = TRUE,          save    = TRUE,            outfile = \"xenium_breast2_heatmap.pdf\"  )"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Chenxuan Zang. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Zang C (2025). highSpaClone: Copy Number Variation Inference Tumor Subclone Analysis High-Resolution Spatial Transcriptomics. R package version 1.0.0, https://github.com/CZang409/highSpaClone.","code":"@Manual{,   title = {highSpaClone: Copy Number Variation Inference and Tumor Subclone Analysis for High-Resolution Spatial Transcriptomics},   author = {Chenxuan Zang},   year = {2025},   note = {R package version 1.0.0},   url = {https://github.com/CZang409/highSpaClone}, }"},{"path":"/index.html","id":"highspaclone","dir":"","previous_headings":"","what":"Copy Number Variation Inference and Tumor Subclone Analysis for High-Resolution Spatial Transcriptomics","title":"Copy Number Variation Inference and Tumor Subclone Analysis for High-Resolution Spatial Transcriptomics","text":"highSpaClone computational framework spatial CNV inference tumor subclone classification high-resolution spatial transcriptomics (SRT) data. method integrates two key features: CNVs, define genetically distinct tumor subclones, spatial proximity, reflects tendency related clones aggregate within tumor microenvironment. jointly modeling features, highSpaClone assigns subclonal labels individual cells reconstructs spatial CNV landscape whole tissue sections. algorithm implemented within efficient optimization framework scales datasets comprising hundreds thousands cells, enabling accurate interpretable analysis across diverse SRT platforms.","code":""},{"path":"/index.html","id":"dependencies","dir":"","previous_headings":"","what":"Dependencies","title":"Copy Number Variation Inference and Tumor Subclone Analysis for High-Resolution Spatial Transcriptomics","text":"R 4.3+ Package dependencies: Rcpp, RcppArmadillo, Matrix, dplyr, magrittr, ComplexHeatmap, RANN, circlize, cluster, ggplot2, stats, utils, methods, parallel","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Copy Number Variation Inference and Tumor Subclone Analysis for High-Resolution Spatial Transcriptomics","text":"R package can installed github:","code":"# Install devtools, if necessary if (!requireNamespace(\"devtools\", quietly = TRUE))     install.packages(\"devtools\")  devtools::install_github('CZang409/highSpaClone')  # load package library(highSpaClone)"},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"/reference/cnv_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Chromosome-binned CNV heatmap with group annotations — cnv_heatmap","title":"Chromosome-binned CNV heatmap with group annotations — cnv_heatmap","text":"Draw CNV heatmap split chromosomes annotated sample/cell grouping variable. Designed objects provide cnv.data (cells × bins), annotation (cell.id grouping column), chr_pos (per-chromosome bin start indices). Supports -screen display saving PDF/PNG optional auto-sizing based data dimensions.","code":""},{"path":"/reference/cnv_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Chromosome-binned CNV heatmap with group annotations — cnv_heatmap","text":"","code":"cnv_heatmap(   cnv.obj,   groupby = \"cell.label\",   color_panel = c(\"#ffadad\", \"#ffd6a5\", \"#fdffb6\", \"#caffbf\", \"#9bf6ff\", \"#a0c4ff\",     \"#bdb2ff\", \"#ffc6ff\"),   min_value = -3,   max_value = 3,   show = TRUE,   save = FALSE,   outfile = \"cnv_heatmap.pdf\",   auto_size = TRUE,   width_in = 10,   height_in = 6,   res = 300,   ... )"},{"path":"/reference/cnv_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Chromosome-binned CNV heatmap with group annotations — cnv_heatmap","text":"cnv.obj list-like object components: cnv.data: numeric matrix, rows = cells/spots, cols = bins. annotation: data.frame least columns cell.id column referenced groupby. chr_pos: named numeric/integer vector list mapping chromosome names 0-based start indices bins (.e., first bin index chromosome k start+1). groupby Character scalar; column name cnv.obj$annotation used color rows (default \"cell.label\"). color_panel Character vector colors used group annotation (recycled number groups). min_value, max_value Numeric; lower/upper limits heatmap color mapping (default -3 3). show Logical; draw current device (default TRUE). save Logical; TRUE, write file outfile. outfile Character; output filename. ends .pdf .png, format used. Otherwise PDF PNG written sensible names. auto_size Logical; TRUE (default) choose device size based matrix dimensions. width_in, height_in Numeric; device width/height inches used auto_size = FALSE. Ignored otherwise. res Integer; PNG resolution (dpi) saving PNG (default 300). ... Passed ComplexHeatmap::Heatmap().","code":""},{"path":"/reference/cnv_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Chromosome-binned CNV heatmap with group annotations — cnv_heatmap","text":"(Invisibly) HeatmapList object.","code":""},{"path":"/reference/cnv_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Chromosome-binned CNV heatmap with group annotations — cnv_heatmap","text":"","code":"if (FALSE) { # \\dontrun{ ht <- cnv_heatmap(   cnv.obj,   groupby = \"cell.label\",   show = TRUE,   save = TRUE,   outfile = \"cnv_heatmap.pdf\" ) } # }"},{"path":"/reference/createObject.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a highSpaClone object. — createObject","title":"Create a highSpaClone object. — createObject","text":"Create highSpaClone object.","code":""},{"path":"/reference/createObject.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a highSpaClone object. — createObject","text":"","code":"createObject(   counts,   location,   min_avg_expression = 0.01,   min_gene_counts = 100,   gene_order_file = NULL,   annotations_file = NULL,   project = \"\" )"},{"path":"/reference/createObject.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a highSpaClone object. — createObject","text":"counts Gene--cell raw count matrix. location data.frame matrix spatial coordinates cell, three columns (cell.id, x, y). row names location must match column names counts. min_avg_expression Minimum average expression per gene. min_gene_counts Minimum total counts per cell. gene_order_file gene order file, contains chromosome, start, stop position gene. annotations_file Cell type annotation information. contain two columns: cell.id cell.label. Must data.frame, .csv .txt file. project name project.","code":""},{"path":"/reference/createObject.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a highSpaClone object. — createObject","text":"Return preliminary highSpaClone object.","code":""},{"path":"/reference/FindClone.html","id":null,"dir":"Reference","previous_headings":"","what":"Tumor subclone identification with spatial regularization — FindClone","title":"Tumor subclone identification with spatial regularization — FindClone","text":"Tumor subclone identification spatial regularization","code":""},{"path":"/reference/FindClone.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tumor subclone identification with spatial regularization — FindClone","text":"","code":"FindClone(   obj,   ref,   ref.id = NULL,   tumor = NULL,   tumor.id = NULL,   lambda = NULL,   K = NULL,   max_iter = 500,   min_iter = 30,   epsilon = 5e-04,   seed = 12345678 )"},{"path":"/reference/FindClone.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tumor subclone identification with spatial regularization — FindClone","text":"obj highSpaClone object ref Character vector reference (normal) labels. ref.id Optional character vector reference cell IDs. tumor Optional character vector tumor labels; NULL, non-reference cells used. tumor.id Optional vector tumor cell IDs; tumor tumor.id NULL, non-reference cells used. lambda Numeric; spatial regularization strength passed run_iter(). K Integer; number subclones (clusters). NULL, set caller. max_iter Integer; maximum number iterations. min_iter Integer; minimum iterations early stop. epsilon Numeric; convergence threshold relative objective change. seed Integer; random seed.","code":""},{"path":"/reference/FindClone.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tumor subclone identification with spatial regularization — FindClone","text":"input obj : @cnv.data: optimized CNV matrix (tumor cells × bins). @cluster: data.frame(cell.id, x, y, cell.label) cell.label ∈ \"Clone 1\", …, \"Clone K\".","code":""},{"path":"/reference/FindClone.html","id":"convergence-and-stopping","dir":"Reference","previous_headings":"","what":"Convergence and stopping","title":"Tumor subclone identification with spatial regularization — FindClone","text":"FindTumor(): early stop relative improvement < epsilon min_iter, stop objective increase, stop max_iter.","code":""},{"path":"/reference/FindClone.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tumor subclone identification with spatial regularization — FindClone","text":"","code":"if (FALSE) { # \\dontrun{ obj <- FindClone(   obj,   ref = c(\"B cells\", \"T cells\"),   K = 3,   lambda = 1,   max_iter = 500,   min_iter = 30 ) table(obj@cluster$cluster) } # }"},{"path":"/reference/FindTumor.html","id":null,"dir":"Reference","previous_headings":"","what":"Tumor region annotation using reference (normal) cells — FindTumor","title":"Tumor region annotation using reference (normal) cells — FindTumor","text":"Tumor region annotation using reference (normal) cells","code":""},{"path":"/reference/FindTumor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tumor region annotation using reference (normal) cells — FindTumor","text":"","code":"FindTumor(   obj,   ref,   lambda = 1/1000,   K = 2,   max_iter = 500,   min_iter = 30,   epsilon = 5e-04,   seed = 12345678 )"},{"path":"/reference/FindTumor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tumor region annotation using reference (normal) cells — FindTumor","text":"obj highSpaClone object ref Character vector reference (normal) cell-type labels matching obj@annotation$cell.label. lambda Numeric; spatial regularization strength passed run_iter(). K K=2. max_iter Integer; maximum number outer iterations. min_iter Integer; minimum number iterations allowing early stop. epsilon Numeric; convergence threshold relative objective change. seed Integer; random seed used k-means initialization/updates.","code":""},{"path":"/reference/FindTumor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tumor region annotation using reference (normal) cells — FindTumor","text":"input obj updated fields: obj@cnv.data: optimized CNV matrix (cells × bins). obj@cluster: data.frame(cell.id, x, y, cell.label) cell.label ∈ \"Tumor\", \"\".","code":""},{"path":"/reference/FindTumor.html","id":"convergence-and-stopping","dir":"Reference","previous_headings":"","what":"Convergence and stopping","title":"Tumor region annotation using reference (normal) cells — FindTumor","text":"Early stop relative change < epsilon min_iter, objective increases. max_iter reached without meeting criterion, message printed.","code":""},{"path":"/reference/FindTumor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tumor region annotation using reference (normal) cells — FindTumor","text":"","code":"if (FALSE) { # \\dontrun{ obj <- FindTumor(   obj,   ref = c(\"B cells\", \"T cells\"),   lambda = 1/1000,   K = 2,   max_iter = 300,   min_iter = 30 ) head(obj@cluster) } # }"},{"path":"/reference/highSpaClone-class.html","id":null,"dir":"Reference","previous_headings":"","what":"The highSpaClone Class — highSpaClone-class","title":"The highSpaClone Class — highSpaClone-class","text":"highSpaClone Class","code":""},{"path":"/reference/highSpaClone-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"The highSpaClone Class — highSpaClone-class","text":"counts.data Gene--cell raw count matrix. location spatial coordinates cell. chr_pos chromosome position corresponding bin, used subsequent CNV heatmap drawing. smoothed.data Gene--cell smoothed count matrix gene order. cnv.data Final CNV matrix. Dimension: cell--bin. cluster Tumor/Subclone label cell. annotation Cell type annotation information. gene_order Gene ordering information, contains chromosome, start, stop position gene. project name project.","code":""},{"path":"/reference/highSpaClone-package.html","id":null,"dir":"Reference","previous_headings":"","what":"highSpaClone: Copy Number Variation Inference and Tumor Subclone Analysis for High-Resolution Spatial Transcriptomics — highSpaClone-package","title":"highSpaClone: Copy Number Variation Inference and Tumor Subclone Analysis for High-Resolution Spatial Transcriptomics — highSpaClone-package","text":"computational framework spatial copy number variation (CNV) inference tumor subclone classification high-resolution spatial transcriptomics (SRT) data.","code":""},{"path":[]},{"path":"/reference/highSpaClone-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"highSpaClone: Copy Number Variation Inference and Tumor Subclone Analysis for High-Resolution Spatial Transcriptomics — highSpaClone-package","text":"Maintainer: Chenxuan Zang CZang@mdanderson.org (ORCID)","code":""},{"path":"/reference/smooth_expr.html","id":null,"dir":"Reference","previous_headings":"","what":"Smooth expression along chromosomes (windowed running mean) with optional chunking/parallelism. — smooth_expr","title":"Smooth expression along chromosomes (windowed running mean) with optional chunking/parallelism. — smooth_expr","text":"Smooth expression along chromosomes (windowed running mean) optional chunking/parallelism.","code":""},{"path":"/reference/smooth_expr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Smooth expression along chromosomes (windowed running mean) with optional chunking/parallelism. — smooth_expr","text":"","code":"smooth_expr(   obj,   window_size = 101,   step = 50,   exclude_chromosomes = c(\"chrX\", \"chrY\", \"chrM\"),   smooth_with_ends = FALSE,   use_chunk = TRUE,   chunk_size = 5000,   parallel = FALSE,   n_cores = NULL,   max_cores = 4 )"},{"path":"/reference/smooth_expr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Smooth expression along chromosomes (windowed running mean) with optional chunking/parallelism. — smooth_expr","text":"obj highSpaClone object. window_size Integer. Size running-mean window (genes) used within chromosome (default: 101). step Integer. Number genes bin (default: 50). exclude_chromosomes Chromosomes excluded analysis (default: c('chrX', 'chrY', 'chrM')). smooth_with_ends Logical. Whether apply end-aware smoother (default: FALSE). use_chunk Logical. TRUE, split cells chunks size chunk_size chunk_size Integer. Number cells per chunk use_chunk=TRUE. parallel Logical. TRUE, process chunks parallel. n_cores Integer NULL. Number CPU cores use parallel=TRUE. NULL, uses parallel::detectCores()-1. effective cores capped max_cores number chunks (default NULL). max_cores Integer. Upper bound cores even available (default 4).","code":""},{"path":"/reference/smooth_expr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Smooth expression along chromosomes (windowed running mean) with optional chunking/parallelism. — smooth_expr","text":"Return highSpaClone object containing smoothed gene expression data","code":""},{"path":"/reference/spatialplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Spatial scatter plot of inferred subclones — spatialplot","title":"Spatial scatter plot of inferred subclones — spatialplot","text":"Draws spatial scatter plot cnv_obj@cluster, coloring points clone label. Optionally flips axes coord_flip().","code":""},{"path":"/reference/spatialplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spatial scatter plot of inferred subclones — spatialplot","text":"","code":"spatialplot(   cnv_obj,   colors = c(\"#ebe5c2\", \"#D57358\", \"#8a508f\", \"#023047\", \"#E64B35\", \"#4DBBD5\", \"#00A087\",     \"#3C5488\", \"#F39B7F\", \"#8491B4\", \"#91D1C2\", \"#DC0000\", \"#7E6148\", \"#B09C85\"),   point_size = 0.01,   use_x_reverse = FALSE,   use_coord_flip = FALSE,   title = \"\" )"},{"path":"/reference/spatialplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spatial scatter plot of inferred subclones — spatialplot","text":"cnv_obj highSpaClone object. colors Character vector hex/color names used clusters. point_size Numeric point size passed geom_point(). use_x_reverse Logical; TRUE, reverses x-axis direction (.e., flips plot horizontally). option useful spatial coordinates mirrored relative original histology image want align orientation external annotations. Default FALSE. use_coord_flip Logical; TRUE, flips coordinate axes (useful image orientation requires rotation). Default FALSE. title Character plot title.","code":""},{"path":"/reference/spatialplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Spatial scatter plot of inferred subclones — spatialplot","text":"","code":"if (FALSE) { # \\dontrun{ p <- spatialplot(cnv_obj,                  point_size = 0.01,                  use_x_reverse = T,                  use_coord_flip = T,                  title = \"Tumor subclones\") print(p) } # }"},{"path":"/reference/suggest_k.html","id":null,"dir":"Reference","previous_headings":"","what":"Suggest the number of subclones (K) using average silhouette — suggest_k","title":"Suggest the number of subclones (K) using average silhouette — suggest_k","text":"Computes recommendation number subclones K using average silhouette MDS embedding derived CNV data. Optionally fuses spatial distances obj@location CNV distances (weight alpha) embedding. Saves two figures prints silhouette-vs-K plot device. Pick K obtaions largest average silhoutte score.","code":""},{"path":"/reference/suggest_k.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Suggest the number of subclones (K) using average silhouette — suggest_k","text":"","code":"suggest_k(   obj,   ref,   ref.id = NULL,   tumor,   tumor.id = NULL,   k_range = 2:8,   n_sub = 5000,   alpha = 0.7,   seed = 123,   out_dir = \"figs_k\" )"},{"path":"/reference/suggest_k.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Suggest the number of subclones (K) using average silhouette — suggest_k","text":"obj highSpaClone object ref Character vector reference (normal) cell labels. ref.id Character vector reference cell IDs. tumor Character vector tumor cell labels. tumor.id Character vector tumor cell IDs. tumor label/IDs absent, non-reference cells used. k_range Integer vector K values evaluate. n_sub Integer. Max number cells subsample evaluation (default: 5000). alpha NULL CNV-. number [0,1], fuse CNV spatial distances: \\(d = alpha * d_{CNV} + (1-alpha) * d_{spatial}\\) (default: 0.7). seed Integer seed reproducibility. out_dir Output directory figures.","code":""},{"path":"/reference/suggest_k.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Suggest the number of subclones (K) using average silhouette — suggest_k","text":"Two figures saved out_dir: silhouette_vs_k.png: Average silhouette vs K. silhouette_bars_k_recommended.png: Silhouette bars recommended K.","code":""},{"path":[]}]
